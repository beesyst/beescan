import json
import logging
import os
import subprocess
import sys
import threading
import time
from datetime import datetime

ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CONFIG_PATH = os.path.join(ROOT_DIR, "config", "config.json")
LOGS_PATH = os.path.join(ROOT_DIR, "logs", "host.log")

with open(CONFIG_PATH, "r") as config_file:
    CONFIG = json.load(config_file)

sys.path.insert(0, ROOT_DIR)
from core.logger_container import clear_container_log_if_needed
from core.logger_host import setup_host_logger

setup_host_logger(CONFIG)
clear_container_log_if_needed(CONFIG)

DB_CONTAINER = CONFIG["database"]["container_name"]
NETWORK_NAME = CONFIG["docker_network"]


def spinner(prefix: str, stop_event: threading.Event):
    symbols = ["‚†Å", "‚†Ç", "‚†Ñ", "‚†Ç"]
    i = 0
    try:
        sys.stdout.write("\033[?25l")
        while not stop_event.is_set():
            sys.stdout.write(f"\r{prefix} {symbols[i % len(symbols)]}")
            sys.stdout.flush()
            i += 1
            time.sleep(0.1)
    finally:
        sys.stdout.write("\r" + " " * 80 + "\r")
        sys.stdout.write("\033[?25h")
        sys.stdout.flush()


def run_command(command, cwd=None, hide_output=True):
    logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
    result = subprocess.run(
        command,
        shell=True,
        cwd=cwd,
        stdout=subprocess.DEVNULL if hide_output else None,
        stderr=subprocess.DEVNULL if hide_output else None,
    )
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {command}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        return False
    return True


def run_command_with_spinner(command, prefix, cwd=None, hide_output=True):
    # logging.info(f"{prefix}...")
    stop_event = threading.Event()
    spinner_thread = threading.Thread(target=spinner, args=(prefix, stop_event))
    spinner_thread.start()

    result = subprocess.run(
        command,
        shell=True,
        cwd=cwd,
        stdout=subprocess.DEVNULL if hide_output else None,
        stderr=subprocess.DEVNULL if hide_output else None,
    )

    stop_event.set()
    spinner_thread.join()

    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {command}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        return False
    return True


def check_docker_installed():
    try:
        subprocess.run(["docker", "--version"], check=True, stdout=subprocess.DEVNULL)
        logging.info("Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except subprocess.CalledProcessError:
        print("üö® –û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        logging.critical("Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)


def clean_docker_environment():
    result = subprocess.run(
        ["docker", "network", "ls", "-q", "--filter", f"name={NETWORK_NAME}"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if not result.stdout.strip():
        print(f"üåê –°–µ—Ç—å {NETWORK_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é...")
        logging.info(f"–°–µ—Ç—å {NETWORK_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∏–µ...")
        run_command_with_spinner(
            f"docker network create {NETWORK_NAME}", "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏"
        )
        print(f"\r‚úÖ –°–µ—Ç—å {NETWORK_NAME} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç—å Docker: {NETWORK_NAME}")
    else:
        print(f"‚úÖ –°–µ—Ç—å {NETWORK_NAME} –Ω–∞–π–¥–µ–Ω–∞.")
        logging.info(f"–°–µ—Ç—å {NETWORK_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


def start_postgres():
    result = subprocess.run(
        ["docker", "ps", "-q", "--filter", f"name={DB_CONTAINER}"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if result.stdout.strip():
        print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω.")
        logging.info("PostgreSQL —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    print("üóÑÔ∏è PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
    logging.info("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫...")
    run_command_with_spinner(
        "docker compose -f db/compose.yaml up --build -d",
        "‚è≥ –ó–∞–ø—É—Å–∫ PostgreSQL...",
        cwd=ROOT_DIR,
    )

    time.sleep(1)
    for _ in range(30):
        result = subprocess.run(
            [
                "docker",
                "exec",
                DB_CONTAINER,
                "pg_isready",
                "-U",
                CONFIG["database"]["POSTGRES_USER"],
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if result.returncode == 0:
            print("\r‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logging.info("PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
            return
        time.sleep(1)

    print("\n‚ùå –û—à–∏–±–∫–∞: PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.")
    logging.critical("PostgreSQL –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –≤–æ–≤—Ä–µ–º—è!")
    exit(1)


def ensure_secwebscan_base_image():
    result = subprocess.run(
        ["docker", "images", "-q", "secwebscan-base"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if not result.stdout.strip():
        print("üì¶ –û–±—Ä–∞–∑ secwebscan-base –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É...")
        logging.info("–û–±—Ä–∞–∑ secwebscan-base –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏...")
        success = run_command_with_spinner(
            "docker build -t secwebscan-base -f docker/Dockerfile.base .",
            "‚è≥ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞",
            cwd=ROOT_DIR,
            hide_output=True,
        )
        if not success:
            print("‚ùå –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")
            logging.critical("–°–±–æ—Ä–∫–∞ secwebscan-base –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            exit(1)
        print("‚úÖ –û–±—Ä–∞–∑ secwebscan-base —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
        logging.info("–°–±–æ—Ä–∫–∞ secwebscan-base –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    else:
        print("‚úÖ –û–±—Ä–∞–∑ secwebscan-base —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        logging.info("–û–±—Ä–∞–∑ secwebscan-base –Ω–∞–π–¥–µ–Ω.")


def start_secwebscan_container():
    result = subprocess.run(
        ["docker", "ps", "-q", "--filter", "name=secwebscan_base"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if result.stdout.strip():
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        logging.info("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    result_all = subprocess.run(
        ["docker", "ps", "-aq", "--filter", "name=secwebscan_base"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if result_all.stdout.strip():
        print("üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base. –£–¥–∞–ª—è–µ–º...")
        logging.info("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ secwebscan_base.")
        subprocess.run(["docker", "rm", "-f", "secwebscan_base"])

    print("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan-base –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é...")
    logging.info("–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ secwebscan_base...")

    volumes = [
        "-v",
        f"{os.path.join(ROOT_DIR, 'core')}:/core",
        "-v",
        f"{os.path.join(ROOT_DIR, 'results')}:/results",
        "-v",
        f"{os.path.join(ROOT_DIR, 'logs', 'container.log')}:/logs/container.log",
        "-v",
        f"{os.path.join(ROOT_DIR, 'config')}:/config",
        "-v",
        f"{os.path.join(ROOT_DIR, 'templates')}:/templates",
        "-v",
        f"{os.path.join(ROOT_DIR, 'reports')}:/reports",
        "-v",
        f"{os.path.join(ROOT_DIR, 'plugins')}:/plugins",
        "-v",
        "/etc/timezone:/etc/timezone:ro",
        "-v",
        "/etc/localtime:/etc/localtime:ro",
    ]

    success = run_command_with_spinner(
        f"docker run -d --name secwebscan_base --network {NETWORK_NAME} "
        + " ".join(volumes)
        + " secwebscan-base tail -f /dev/null",
        prefix="‚è≥ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ secwebscan_base...",
        cwd=ROOT_DIR,
    )

    if success:
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base –≥–æ—Ç–æ–≤.")
        logging.info("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")


def run_plugins():
    print("üîß –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
    logging.info("–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ plugin_runner.py")
    run_command_with_spinner(
        "docker exec secwebscan_base python3 /core/plugin_runner.py",
        "‚è≥ –ü–ª–∞–≥–∏–Ω—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è...",
    )


def run_collector():
    print("üì• –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î...")
    logging.info("–°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –∑–∞–ø—É—Å–∫ collector.py –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    run_command(
        "docker exec secwebscan_base python3 /core/collector.py", hide_output=False
    )


def generate_reports():
    print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞—á–∞—Ç–∞.")
    formats = CONFIG.get("scan_config", {}).get("report_formats", ["html"])
    open_report = CONFIG.get("scan_config", {}).get("open_report", False)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    html_report_name = f"report_{timestamp}.html"
    html_report_path = os.path.join(ROOT_DIR, "reports", html_report_name)

    for fmt in formats:
        if fmt not in ["html", "pdf", "txt", "terminal"]:
            print(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {fmt} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            logging.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: {fmt}")
            continue

        print(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {fmt.upper()}...")
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {fmt.upper()}...")
        success = run_command(
            f"docker exec secwebscan_base python3 /core/report_generator.py --format {fmt} --timestamp {timestamp}",
            hide_output=False,
        )

        if success:
            print(f"‚úÖ –û—Ç—á–µ—Ç {fmt.upper()} –≥–æ—Ç–æ–≤.")
            logging.info(f"–û—Ç—á–µ—Ç {fmt.upper()} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {fmt.upper()}.")
            continue

        if open_report and fmt == "html" and os.path.exists(html_report_path):
            try:
                print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º HTML-–æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {html_report_path}")
                logging.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ HTML-–æ—Ç—á–µ—Ç–∞: {html_report_path}")
                subprocess.Popen(
                    ["xdg-open", html_report_path],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å HTML-–æ—Ç—á–µ—Ç: {e}")


def post_scan_chown():
    try:
        user_id = os.getuid()
        group_id = os.getgid()
        run_command(
            f"docker exec secwebscan_base chown -R {user_id}:{group_id} /reports",
            hide_output=False,
        )
        print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ /reports –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {user_id}:{group_id}")
        logging.info(f"–ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ /reports –Ω–∞ {user_id}:{group_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤: {e}")
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤: {e}")


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ SecWebScan...")
    logging.info("==== SecWebScan –∑–∞–ø—É—Å–∫ –Ω–∞—á–∞—Ç ====")
    check_docker_installed()
    clean_docker_environment()
    start_postgres()
    ensure_secwebscan_base_image()
    start_secwebscan_container()
    run_plugins()
    run_collector()
    generate_reports()
    post_scan_chown()
    print("‚úÖ SecWebScan –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!")
    logging.info("==== SecWebScan –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ ====")


if __name__ == "__main__":
    main()
