import json
import logging
import os
import subprocess
import sys
import time
from datetime import datetime

ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CONFIG_PATH = os.path.join(ROOT_DIR, "config", "config.json")
LOGS_PATH = os.path.join(ROOT_DIR, "logs", "host.log")

with open(CONFIG_PATH, "r") as config_file:
    CONFIG = json.load(config_file)

sys.path.insert(0, ROOT_DIR)
from core.logger_container import clear_container_log_if_needed
from core.logger_host import setup_host_logger

setup_host_logger(CONFIG)
clear_container_log_if_needed(CONFIG)

DB_CONTAINER = CONFIG["database"]["container_name"]
NETWORK_NAME = CONFIG["docker_network"]


def run_command(command, cwd=None, hide_output=True):
    logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
    result = subprocess.run(
        command,
        shell=True,
        cwd=cwd,
        stdout=subprocess.DEVNULL if hide_output else None,
        stderr=subprocess.DEVNULL if hide_output else None,
    )
    if result.returncode != 0:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {command}")
        return False
    return True


def check_docker_installed():
    try:
        subprocess.run(["docker", "--version"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        logging.critical("Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üö® –û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        exit(1)


def clean_docker_environment():
    print("üñß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker...")
    result = subprocess.run(
        ["docker", "network", "ls", "-q", "--filter", f"name={NETWORK_NAME}"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if not result.stdout.strip():
        print(f"üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ {NETWORK_NAME}...")
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ Docker: {NETWORK_NAME}")
        subprocess.run(
            ["docker", "network", "create", NETWORK_NAME],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    else:
        print(f"‚úÖ –°–µ—Ç—å {NETWORK_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
        logging.info(f"–°–µ—Ç—å {NETWORK_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


def start_postgres():
    print("üêò –ó–∞–ø—É—Å–∫ PostgreSQL...")
    result = subprocess.run(
        ["docker", "ps", "-q", "--filter", f"name={DB_CONTAINER}"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if result.stdout.strip():
        print("‚úÖ PostgreSQL —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
        logging.info("PostgreSQL —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    run_command("docker compose -f db/compose.yaml up --build -d", cwd=ROOT_DIR)

    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...")
    for attempt in range(30):
        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/30)...")
        result = subprocess.run(
            [
                "docker",
                "exec",
                DB_CONTAINER,
                "pg_isready",
                "-U",
                CONFIG["database"]["POSTGRES_USER"],
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if result.returncode == 0:
            print("‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logging.info("PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
            return
        time.sleep(2)

    print("‚ùå –û—à–∏–±–∫–∞: PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.")
    logging.critical("PostgreSQL –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –≤–æ–≤—Ä–µ–º—è!")
    exit(1)


def ensure_secwebscan_base_image():
    result = subprocess.run(
        ["docker", "images", "-q", "secwebscan-base"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if not result.stdout.strip():
        print("üì¶ –û–±—Ä–∞–∑ secwebscan-base –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–±–∏—Ä–∞–µ–º...")
        logging.info("–û–±—Ä–∞–∑ secwebscan-base –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É...")
        build_cmd = "docker build -t secwebscan-base -f docker/Dockerfile.base ."
        success = run_command(build_cmd, cwd=ROOT_DIR)
        if not success:
            logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ secwebscan-base.")
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            exit(1)
    else:
        logging.info("–û–±—Ä–∞–∑ secwebscan-base –Ω–∞–π–¥–µ–Ω.")


def start_secwebscan_container():
    result = subprocess.run(
        ["docker", "ps", "-q", "--filter", "name=secwebscan_base"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if result.stdout.strip():
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    result_all = subprocess.run(
        ["docker", "ps", "-aq", "--filter", "name=secwebscan_base"],
        stdout=subprocess.PIPE,
        text=True,
    )
    if result_all.stdout.strip():
        print("üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä secwebscan_base. –£–¥–∞–ª—è–µ–º...")
        subprocess.run(["docker", "rm", "-f", "secwebscan_base"])

    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ secwebscan_base...")
    volumes = [
        "-v",
        f"{os.path.join(ROOT_DIR, 'core')}:/core",
        "-v",
        f"{os.path.join(ROOT_DIR, 'results')}:/results",
        "-v",
        f"{os.path.join(ROOT_DIR, 'logs', 'container.log')}:/logs/container.log",
        "-v",
        f"{os.path.join(ROOT_DIR, 'config')}:/config",
        "-v",
        f"{os.path.join(ROOT_DIR, 'templates')}:/templates",
        "-v",
        f"{os.path.join(ROOT_DIR, 'reports')}:/reports",
        "-v",
        f"{os.path.join(ROOT_DIR, 'plugins')}:/plugins",
    ]

    run_command(
        f"docker run -d --name secwebscan_base --network {NETWORK_NAME} "
        + " ".join(volumes)
        + " secwebscan-base tail -f /dev/null",
        cwd=ROOT_DIR,
    )


def run_plugins():
    print("üîß –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
    logging.info("–ó–∞–ø—É—Å–∫ plugin_runner.py...")
    run_command(
        "docker exec secwebscan_base python3 /core/plugin_runner.py", hide_output=False
    )


def run_collector():
    print("üì• –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î...")
    logging.info("–ó–∞–ø—É—Å–∫ collector.py –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    run_command(
        "docker exec secwebscan_base python3 /core/collector.py", hide_output=False
    )


def generate_reports():
    print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤...")

    formats = CONFIG.get("scan_config", {}).get("report_formats", ["html"])
    open_report = CONFIG.get("scan_config", {}).get("open_report", False)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    html_report_name = f"report_{timestamp}.html"
    html_report_path = os.path.join(ROOT_DIR, "reports", html_report_name)

    for fmt in formats:
        if fmt not in ["html", "pdf", "txt", "terminal"]:
            logging.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: {fmt}")
            print(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {fmt} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        print(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {fmt.upper()}...")
        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {fmt.upper()}")

        success = run_command(
            f"docker exec secwebscan_base python3 /core/report_generator.py --format {fmt} --timestamp {timestamp}",
            hide_output=False,
        )

        if success:
            logging.info(f"–û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {fmt.upper()} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
            print(f"‚úÖ –û—Ç—á–µ—Ç {fmt.upper()} –≥–æ—Ç–æ–≤.")
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {fmt.upper()}.")
            continue

        if open_report and fmt == "html":
            if os.path.exists(html_report_path):
                try:
                    print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º HTML-–æ—Ç—á—ë—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {html_report_path}")
                    logging.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ HTML-–æ—Ç—á–µ—Ç–∞: {html_report_path}")
                    subprocess.Popen(
                        ["xdg-open", html_report_path],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL,
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å HTML-–æ—Ç—á–µ—Ç: {e}")
            else:
                logging.warning(f"HTML-–æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_report_path}")


def post_scan_chown():
    try:
        user_id = os.getuid()
        group_id = os.getgid()
        run_command(
            f"docker exec secwebscan_base chown -R {user_id}:{group_id} /reports",
            hide_output=False,
        )
        logging.info(
            f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /reports –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ {user_id}:{group_id}"
        )
        print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ /reports –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {user_id}:{group_id}")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤: {e}")


def main():
    check_docker_installed()
    clean_docker_environment()
    start_postgres()
    ensure_secwebscan_base_image()
    start_secwebscan_container()
    run_plugins()
    run_collector()
    generate_reports()
    post_scan_chown()
    print("‚úÖ SecWebScan –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!")
    logging.info("SecWebScan –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!")


if __name__ == "__main__":
    main()
